#pragma once
//同样采用双向链表

#include<iostream>
#include<exception>
#include"container.h"
//#include<>其他可能的头文件，考虑是否应该加入类型隔离头文件

//-----------------------------------------------------
//可能的准备工作：
/*添加名字空间
  进行类型定义
  进行节点定义
*/
//进行dlist类的封装

//类是否要继承，类是否应该设置为模板类。
//——————>>注意每个数据库（文件）可以为一个节点，每张表也应当是一个节点，表的每一行也应该是一个节点
//由此可见，之后的几个类应当继承Dlist类,并使用dlist类来进行节点的操作

template < typename ~ >
class dlist: public container < ~ > {
//----------------------------------公有的类型定义
public:

//----------------------------------私有属性
private:
    struct node {
        //node还没想好怎么设置
    };

//----------------------------------共有属性
public:

//----------------------------------类的构造函数和析构函数
    dlist() {

    }
    ~dlist() {

    }
//----------------------------------类的抽象方法
    //作为链表，应该含有：
    /*1.链表的初始化

      2.链表的头插

      3.链表的尾插

      4.链表指定在节点n后插入

      5.指定节点的删除

      6.链表的遍历，这里建议使用迭代器
    */
    //迭代器设定
};
